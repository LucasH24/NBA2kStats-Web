@model SeasonGameViewModel

<div class="p-4">
        
    <div class="pb-1">
        <h1>@Model.season.Team1 vs @Model.season.Team2 (@Model.season.Team1W - @Model.season.Team2W)</h1>
    </div>


    @if (User.IsInRole("admin"))
    {
        <a asp-action="AddSeasonGame" asp-controller="Add" asp-route-id="@Model.season.SeasonID">Add Game</a>
    }

    @if (User.IsInRole("viewer") == false && Model.season.IsAppropriate == false)
    {
        <p> No data available </p>
    }

    else if (Model.SeasonGames.Count() == 0)
    {
        <p>There are no games recorded</p>
    }
    else
    {
        <div class="rounded w-75" style="border-width: 2px; border-style:solid;"> 
            <table class="table table-sm m-0">
                <tr>
                    <th scope="col"> Game </th>
                    <th scope="col"> Team 1 </th>
                    <th scope="col"> Team 2 </th>
                    <th scope="col"> Result </th>
                    <th scope="col"> </th>
                </tr>

                @foreach (SeasonGame game in Model.SeasonGames.OrderBy(g => g.GameNumber))
                {
                    <tr>
                        <td> @game.GameNumber </td>
                        <th class="t-@game.Team1Color"> @game.Team1Name </th>
                        <th class="t-@game.Team2Color"> @game.Team2Name </th>
                        <td> @game.Team1Score - @game.Team2Score </td>
                        <td> <a asp-action="SeasonGameDetail" asp-route-id="@game.SeasonGameID"
                                asp-route-seasonID="@Model.season.SeasonID">
                                Game Stats </a>
                        </td>
                    </tr>
                }
            </table>
        </div>

        int x = 1;

        while (3 > x)
        {

            string teamName = "";
            string teamColor = "";

            if (x == 1)
            {
                teamName = Model.season.Team1;
                teamColor = Model.season.Team1Color;
            }

            if (x == 2)
            {
                teamName = Model.season.Team2;
                teamColor = Model.season.Team2Color;
            }



            <h3 class="pt-3"> @teamName Stats</h3>

            <div class="rounded w-75" style="border-width: 2px; border-style:solid;">
                <table class="table table-sm table-borderless table-striped m-0">
                    <thead>

                        <thead>
                            <tr class="c-@teamColor text-white">
                                <th class="w-auto" scope="col"> Player Name </th>
                                <th class="w-auto" scope="col"> MIN </th>
                                <th class="w-auto" scope="col"> PTS </th>
                                <th scope="col"> REB </th>
                                <th scope="col"> AST </th>
                                <th scope="col"> STL </th>
                                <th scope="col"> BLK </th>
                                <th scope="col"> TO </th>
                                <th scope="col"> FG </th>
                                <th scope="col"> 3PT </th>
                                <th scope="col"> FG% </th>
                                <th scope="col"> 3PT% </th>
                                <th scope="col"> FTM </th>
                                <th scope="col"> BRT </th>
                            </tr>
                        </thead>

                    </thead>

                    <tbody>
                        @{
                            double seasonLength = 0;
                            @foreach (SeasonBox seasonBox in Model.SeasonBoxes)
                            {
                                seasonLength = seasonLength + seasonBox.MIN;
                            }
                            seasonLength = seasonLength / 10;
                            seasonLength = seasonLength / Model.season.PlayedGames;

                            double gameScale = 36 / seasonLength;
                            int i = 0;
                            double FMIN = 0;
                            double FPTS = 0;
                            double FREB = 0;
                            double FAST = 0;
                            double FSTLS = 0;
                            double FBLK = 0;
                            double FTOR = 0;
                            double FFTM = 0;
                            double FFGM = 0;
                            double FFGA = 0;
                            double FTPM = 0;
                            double FTPA = 0;

                            @while (13 > i)
                            {
                                string Name = "";
                                double MIN = 0;
                                double PTS = 0;
                                double REB = 0;
                                double AST = 0;
                                double STLS = 0;
                                double BLK = 0;
                                double TOR = 0;
                                double FTM = 0;
                                double FGM = 0;
                                double FGA = 0;
                                double TPM = 0;
                                double TPA = 0;
                                double BRT = 0;
                                double AFGM = 0;
                                double AFGA = 0;
                                double ATPM = 0;
                                double ATPA = 0;
                                foreach (SeasonBox seasonBox in Model.SeasonBoxes.Where(p => p.Team == x && p.POS == i))
                                {

                                    Name = seasonBox.PlayerName;
                                    MIN = seasonBox.MIN + MIN;
                                    PTS = seasonBox.PTS + PTS;
                                    REB = seasonBox.REB + REB;
                                    AST = seasonBox.AST + AST;
                                    STLS = seasonBox.STLS + STLS;
                                    BLK = seasonBox.BLK + BLK;
                                    TOR = seasonBox.TOR + TOR;
                                    FTM = seasonBox.PTS - (seasonBox.TPM * 3 + ((seasonBox.FGM - seasonBox.TPM) * 2)) + FTM;
                                    FGM = seasonBox.FGM + FGM;
                                    FGA = seasonBox.FGA + FGA;
                                    TPM = seasonBox.TPM + TPM;
                                    TPA = seasonBox.TPA + TPA;

                                }
                                MIN = Math.Round(((MIN / Model.season.PlayedGames) * gameScale), 1);
                                PTS = Math.Round(((PTS / Model.season.PlayedGames) * gameScale), 1);
                                REB = Math.Round(((REB / Model.season.PlayedGames) * gameScale), 1);
                                AST = Math.Round(((AST / Model.season.PlayedGames) * gameScale), 1);
                                STLS = Math.Round(((STLS / Model.season.PlayedGames) * gameScale), 1);
                                BLK = Math.Round(((BLK / Model.season.PlayedGames) * gameScale), 1);
                                TOR = Math.Round(((TOR / Model.season.PlayedGames) * gameScale), 1);
                                FTM = Math.Round(((FTM / Model.season.PlayedGames) * gameScale), 1);

                                AFGM = Math.Round((FGM / Model.season.PlayedGames) * gameScale, 1);
                                AFGA = Math.Round((FGA / Model.season.PlayedGames) * gameScale, 1);
                                ATPM = Math.Round((TPM / Model.season.PlayedGames) * gameScale, 1);
                                ATPA = Math.Round((TPA / Model.season.PlayedGames) * gameScale, 1);

                                FMIN = FMIN + MIN;
                                FPTS = FPTS + PTS;
                                FREB = FREB + REB;
                                FAST = FAST + AST;
                                FSTLS = FSTLS + STLS;
                                FBLK = FBLK + BLK;
                                FTOR = FTOR + TOR;
                                FFTM = FFTM + FTM;
                                FFGM = FFGM + FGM;
                                FFGA = FFGA + FGA;
                                FTPM = FTPM + TPM;
                                FTPA = FTPA + TPA;

                                double FT = PTS - (ATPM * 3 + ((AFGM - ATPM) * 2));
                                FT = PTS - (ATPM * 3 + ((AFGM - ATPM) * 2));
                                double scoreFinal = (((PTS + (0.4 * AFGM) - (0.8 * AFGA) - (0.4 * FT) + (0.5 * REB) + STLS + (0.7 * AST) + (0.7
                                * BLK) - TOR) / (MIN)) * 20);
                                scoreFinal = scoreFinal - 7;
                                scoreFinal = Math.Round(scoreFinal, 1);
                                BRT = Math.Round(scoreFinal, 1);

                                var colorChange = "";
                                if (scoreFinal >= 15) { colorChange = "#ac00f0"; }
                                else if (scoreFinal >= 10) { colorChange = "#1c24ff"; }
                                else if (scoreFinal >= 6) { colorChange = "#1c95ff"; }
                                else if (scoreFinal >= 3) { colorChange = "#187037"; }
                                else if (scoreFinal >= 0) { colorChange = "#9e9224"; }
                                else if (scoreFinal >= -5) { colorChange = "#ed2d2d"; }
                                else { colorChange = "#7a0b0b"; }

                                double FGP = Math.Round(100 * (FGM / FGA), 1);
                                double TPP = Math.Round(100 * (TPM / TPA), 1);

                                @if (MIN != 0)
                                {
                                    <tr>
                                        <td> @Name </td>
                                        <td> @MIN </td>
                                        <td> @PTS </td>
                                        <td> @REB </td>
                                        <td> @AST </td>
                                        <td> @STLS</td>
                                        <td> @BLK </td>
                                        <td> @TOR </td>
                                        <td> @FGM - @FGA </td>
                                        <td> @TPM - @TPA </td>
                                        <td> @FGP% </td>
                                        <td> @TPP% </td>
                                        <td> @FTM </td>
                                        <th style="color: @colorChange"> @BRT </th>
                                    </tr>
                                }
                                i++;

                            }

                            FPTS = Math.Round(FPTS, 1);
                            FREB = Math.Round(FREB, 1);
                            FAST = Math.Round(FAST, 1);
                            FSTLS = Math.Round(FSTLS, 1);
                            FBLK = Math.Round(FBLK, 1);
                            FTOR = Math.Round(FTOR, 1);
                            FFTM = Math.Round(FFTM, 1);
                            double FFGP = Math.Round(100 * (FFGM / FFGA), 1);
                            double FTPP = Math.Round(100 * (FTPM / FTPA), 1);

                            <tr class="font-weight-bold">
                                <td> </td>
                                <td> </td>
                                <td>@FPTS </td>
                                <td> @FREB </td>
                                <td> @FAST </td>
                                <td> @FSTLS </td>
                                <td> @FBLK </td>
                                <td> @FTOR </td>
                                <td> @FFGM - @FFGA </td>
                                <td> @FTPM - @FTPA </td>
                                <td> @FFGP% </td>
                                <td> @FTPP% </td>
                                <td> @FFTM </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            x++;
        }
    }
    </div>
    }
</div>
