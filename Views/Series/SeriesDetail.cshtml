@model GameViewModel

<div class="pb-1 pl-4 pt-4">
  <h1>@Model.series.Team1 vs @Model.series.Team2 (@Model.series.Team1W - @Model.series.Team2W)</h1>
</div>

@if (User.IsInRole("admin"))
{
  <a asp-action="AddGame" asp-controller="Add" asp-route-id="@Model.series.SeriesID">Add Game</a>
}

@if (User.IsInRole("viewer") == false && Model.series.IsAppropriate == false)
{
  <p> No data available </p>
}

else if (Model.Games.Count() == 0)
{
  <p>There are no games recorded</p>
}

else
{
 
 <div class="row pt-2 ml-2 mr-2" style="max-width: 100%;">

    @foreach (Game game in Model.Games.OrderBy(g => g.GameNumber))
    {

      <div class="col border border-dark" style="min-width: 13%; ">
        <div>
          <a asp-action="GameDetail" asp-route-id="@game.GameID" asp-route-seriesID="@Model.series.SeriesID">
            Game @game.GameNumber
          </a>
        </div>

        <div>
          @Model.series.Team1: @game.Team1Score
        </div>

        <div>
          @Model.series.Team2: @game.Team2Score
        </div>
      </div>

    }

  </div>

  int x = 1;

  while (3 > x)
  {

    string teamName = "";
    string teamColor = "";

    if (x == 1)
    {
      teamName = Model.series.Team1;
      teamColor = Model.series.Team1Color;
    }

    if (x == 2)
    {
      teamName = Model.series.Team2;
      teamColor = Model.series.Team2Color;
    }



    <h3 class="pl-4 pt-3"> @teamName Stats</h3>
    <div class="rounded w-75 ml-4" style="border-width: 2px; border-style:solid;">
      <table class="table table-sm table-borderless table-striped m-0">
        <thead>

          <thead>
            <tr class="c-@teamColor text-white">
              <th class="w-auto" scope="col"> Player Name </th>
              <th class="w-auto" scope="col"> MIN </th>
              <th class="w-auto" scope="col"> PTS </th>
              <th scope="col"> REB </th>
              <th scope="col"> AST </th>
              <th scope="col"> STL </th>
              <th scope="col"> BLK </th>
              <th scope="col"> TO </th>
              <th scope="col"> FG </th>
              <th scope="col"> 3PT </th>
              <th scope="col"> FG% </th>
              <th scope="col"> 3PT% </th>
              <th scope="col"> FTM </th>
              <th scope="col"> BRT </th>
            </tr>
          </thead>

        </thead>

        <tbody>
          @{
            double seriesLength = 0;
            @foreach (PlayerBox playerBox in Model.PlayerBoxes)
            {
              seriesLength = seriesLength + playerBox.MIN;
            }
            seriesLength = seriesLength / 10;
            seriesLength = seriesLength / Model.series.PlayedGames;

            double gameScale = 36 / seriesLength;
            int i = 0;
            double FMIN = 0;
            double FPTS = 0;
            double FREB = 0;
            double FAST = 0;
            double FSTLS = 0;
            double FBLK = 0;
            double FTOR = 0;
            double FFTM = 0;
            double FFGM = 0;
            double FFGA = 0;
            double FTPM = 0;
            double FTPA = 0;

            @while (13 > i)
            {
              string Name = "";
              double MIN = 0;
              double PTS = 0;
              double REB = 0;
              double AST = 0;
              double STLS = 0;
              double BLK = 0;
              double TOR = 0;
              double FTM = 0;
              double FGM = 0;
              double FGA = 0;
              double TPM = 0;
              double TPA = 0;
              double BRT = 0;
              double AFGM = 0;
              double AFGA = 0;
              double ATPM = 0;
              double ATPA = 0;
              foreach (PlayerBox playerBox in Model.PlayerBoxes.Where(p => p.Team == x && p.POS == i))
              {

                Name = playerBox.PlayerName;
                MIN = playerBox.MIN + MIN;
                PTS = playerBox.PTS + PTS;
                REB = playerBox.REB + REB;
                AST = playerBox.AST + AST;
                STLS = playerBox.STLS + STLS;
                BLK = playerBox.BLK + BLK;
                TOR = playerBox.TOR + TOR;
                FTM = playerBox.PTS - (playerBox.TPM * 3 + ((playerBox.FGM - playerBox.TPM) * 2)) + FTM;
                FGM = playerBox.FGM + FGM;
                FGA = playerBox.FGA + FGA;
                TPM = playerBox.TPM + TPM;
                TPA = playerBox.TPA + TPA;

              }
              MIN = Math.Round(((MIN / Model.series.PlayedGames) * gameScale), 1);
              PTS = Math.Round(((PTS / Model.series.PlayedGames) * gameScale), 1);
              REB = Math.Round(((REB / Model.series.PlayedGames) * gameScale), 1);
              AST = Math.Round(((AST / Model.series.PlayedGames) * gameScale), 1);
              STLS = Math.Round(((STLS / Model.series.PlayedGames) * gameScale), 1);
              BLK = Math.Round(((BLK / Model.series.PlayedGames) * gameScale), 1);
              TOR = Math.Round(((TOR / Model.series.PlayedGames) * gameScale), 1);
              FTM = Math.Round(((FTM / Model.series.PlayedGames) * gameScale), 1);

              AFGM = Math.Round((FGM / Model.series.PlayedGames) * gameScale, 1);
              AFGA = Math.Round((FGA / Model.series.PlayedGames) * gameScale, 1);
              ATPM = Math.Round((TPM / Model.series.PlayedGames) * gameScale, 1);
              ATPA = Math.Round((TPA / Model.series.PlayedGames) * gameScale, 1);

              FMIN = FMIN + MIN;
              FPTS = FPTS + PTS;
              FREB = FREB + REB;
              FAST = FAST + AST;
              FSTLS = FSTLS + STLS;
              FBLK = FBLK + BLK;
              FTOR = FTOR + TOR;
              FFTM = FFTM + FTM;
              FFGM = FFGM + FGM;
              FFGA = FFGA + FGA;
              FTPM = FTPM + TPM;
              FTPA = FTPA + TPA;

              double FT = PTS - (ATPM * 3 + ((AFGM - ATPM) * 2));
              FT = PTS - (ATPM * 3 + ((AFGM - ATPM) * 2));
              double scoreFinal = (((PTS + (0.4 * AFGM) - (0.8 * AFGA) - (0.4 * FT) + (0.5 * REB) + STLS + (0.7 * AST) + (0.7 *
              BLK) - TOR) / (MIN)) * 20);
              scoreFinal = scoreFinal - 7;
              scoreFinal = Math.Round(scoreFinal, 1);
              BRT = Math.Round(scoreFinal, 1);

              var colorChange = "";
              if (scoreFinal >= 15) { colorChange = "#ac00f0"; }
              else if (scoreFinal >= 10) { colorChange = "#1c24ff"; }
              else if (scoreFinal >= 6) { colorChange = "#1c95ff"; }
              else if (scoreFinal >= 3) { colorChange = "#187037"; }
              else if (scoreFinal >= 0) { colorChange = "#9e9224"; }
              else if (scoreFinal >= -5) { colorChange = "#ed2d2d"; }
              else { colorChange = "#7a0b0b"; }

              double FGP = Math.Round(100 * (FGM / FGA), 1);
              double TPP = Math.Round(100 * (TPM / TPA), 1);

              @if (MIN != 0)
              {
                <tr>
                  <td> @Name </td>
                  <td> @MIN </td>
                  <td> @PTS </td>
                  <td> @REB </td>
                  <td> @AST </td>
                  <td> @STLS</td>
                  <td> @BLK </td>
                  <td> @TOR </td>
                  <td> @FGM - @FGA </td>
                  <td> @TPM - @TPA </td>
                  <td> @FGP% </td>
                  <td> @TPP% </td>
                  <td> @FTM </td>
                  <th style="color: @colorChange"> @BRT </th>
                </tr>
              }
              i++;

            }

            FPTS = Math.Round(FPTS, 1);
            FREB = Math.Round(FREB, 1);
            FAST = Math.Round(FAST, 1);
            FSTLS = Math.Round(FSTLS, 1);
            FBLK = Math.Round(FBLK, 1);
            FTOR = Math.Round(FTOR, 1);
            FFTM = Math.Round(FFTM, 1);
            double FFGP = Math.Round(100 * (FFGM / FFGA), 1);
            double FTPP = Math.Round(100 * (FTPM / FTPA), 1);

            <tr class="font-weight-bold">
              <td> </td>
              <td> </td>
              <td>@FPTS </td>
              <td> @FREB </td>
              <td> @FAST </td>
              <td> @FSTLS </td>
              <td> @FBLK </td>
              <td> @FTOR </td>
              <td> @FFGM - @FFGA </td>
              <td> @FTPM - @FTPA </td>
              <td> @FFGP% </td>
              <td> @FTPP% </td>
              <td> @FFTM </td>
            </tr>
          }
        </tbody>
      </table>
    </div>
    x++;

  }









}
